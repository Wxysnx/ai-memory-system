version: '3.8'

services:
  # API Server
  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    image: ai-memory-system:latest
    container_name: memory-system-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - ../.env
    environment:
      - REDIS_HOST=redis
      - MONGO_HOST=mongodb
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - RAY_ADDRESS=ray://ray-head:10001
    networks:
      - memory-network
    depends_on:
      - redis
      - mongodb
      - kafka
      - ray-head
    command: ["uvicorn", "memory_system.api:app", "--host", "0.0.0.0", "--port", "8000"]

  # Redis for short-term memory
  redis:
    image: redis:7-alpine
    container_name: memory-system-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - memory-network

  # MongoDB for long-term memory
  mongodb:
    image: mongo:6
    container_name: memory-system-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=memory_system
    volumes:
      - mongo-data:/data/db
    networks:
      - memory-network

  # Kafka for event bus
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: memory-system-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - memory-network

  kafka:
    image: bitnami/kafka:latest
    container_name: memory-system-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - memory-network

  # Ray cluster for distributed inference
  ray-head:
    image: rayproject/ray:2.7.0
    container_name: memory-system-ray-head
    restart: unless-stopped
    ports:
      - "8265:8265"  # Ray dashboard
      - "10001:10001"  # Ray client
      - "8000:8000"  # Ray Serve
    command: ["ray", "start", "--head", "--port=6379", "--dashboard-host=0.0.0.0"]
    networks:
      - memory-network

  ray-worker:
    image: rayproject/ray:2.7.0
    container_name: memory-system-ray-worker
    restart: unless-stopped
    command: ["ray", "start", "--address=ray-head:6379"]
    depends_on:
      - ray-head
    networks:
      - memory-network
    deploy:
      replicas: 2

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: memory-system-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - memory-network

  grafana:
    image: grafana/grafana:latest
    container_name: memory-system-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - memory-network
    depends_on:
      - prometheus

networks:
  memory-network:
    driver: bridge

volumes:
  redis-data:
  mongo-data:
  grafana-data: 
